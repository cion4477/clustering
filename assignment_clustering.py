# -*- coding: utf-8 -*-
"""assignment clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G50VtJhBNt_iLDSbq2dAK0sC7xHY6lFR
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.metrics import silhouette_score

df = pd.read_csv('Wine_clust.csv')
df.head()
df.info()
df.describe()

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

wcss = []                                    #KMEAN
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(scaled_data)
    wcss.append(kmeans.inertia_)

# Plotting the Elbow Curve
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.grid(True)
plt.show()

for i in range(2, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    labels = kmeans.fit_predict(scaled_data)
    score = silhouette_score(scaled_data, labels)
    print(f"Silhouette Score for k={i}: {score}")

kmeans = KMeans(n_clusters=3, random_state=42)
df['KMeans_Cluster'] = kmeans.fit_predict(scaled_data)
df.head()

linked = linkage(scaled_data, method='ward')              #HIERARCHICAL
plt.figure(figsize=(10, 5))
dendrogram(linked)
plt.title('Dendrogram')
plt.xlabel('Samples')
plt.ylabel('Distance')
plt.show()

hc = AgglomerativeClustering(n_clusters=3, metric='euclidean', linkage='ward')
df['Hierarchical_Cluster'] = hc.fit_predict(scaled_data)
df.head()

db = DBSCAN(eps=2, min_samples=5)  #DBSCAN
df['DBSCAN_Cluster'] = db.fit_predict(scaled_data)
df['DBSCAN_Cluster'].value_counts()

df[['KMeans_Cluster', 'Hierarchical_Cluster', 'DBSCAN_Cluster']].head(10)